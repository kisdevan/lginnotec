# 워크플로우의 이름입니다. GitHub 레포지토리의 'Actions' 탭에 표시됩니다.
name: Deploy to GitHub Pages

# 워크플로우가 실행될 이벤트를 지정합니다.
on:
  # main 브랜치에 푸시될 때마다 실행됩니다.
  push:
    branches:
      - main
  # Actions 탭에서 수동으로 이 워크플로우를 실행할 수 있도록 합니다.
  workflow_dispatch:

# 워크플로우 실행에 필요한 권한을 설정합니다.
permissions:
  contents: read
  pages: write
  id-token: write

# 동시에 실행되는 배포를 하나로 제한합니다.
concurrency:
  group: "pages"
  cancel-in-progress: true

# 워크플로우는 하나 이상의 'job'으로 구성됩니다.
jobs:
  # 'deploy'라는 이름의 단일 job을 정의합니다.
  deploy:
    # job이 실행될 환경입니다.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # job을 실행할 가상 머신의 종류입니다.
    runs-on: ubuntu-latest
    # job의 단계(steps)를 정의합니다.
    steps:
      # 1. 레포지토리의 코드를 가상 머신으로 체크아웃합니다.
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 배포할 HTML 파일의 이름을 index.html로 변경합니다.
      # GitHub Pages는 기본적으로 index.html 파일을 메인 페이지로 사용합니다.
      - name: Rename file for deployment
        run: mv indexcurriculuminnotec.html index.html

      # 3. GitHub Pages 아티팩트를 업로드할 준비를 합니다.
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 4. 배포할 아티팩트를 업로드합니다.
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 업로드할 폴더를 지정합니다.
          # HTML 파일이 루트에 있다면 '.'으로 설정합니다.
          path: '.'

      # 5. 아티팩트를 GitHub Pages에 배포합니다.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
